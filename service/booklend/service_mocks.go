// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package booklend

import (
	"PRACTICESTUFF/example-go/domain"
	"context"
	"sync"
)

var (
	lockServiceMockCreate         sync.RWMutex
	lockServiceMockCreateBatch    sync.RWMutex
	lockServiceMockIsBookExisted  sync.RWMutex
	lockServiceMockIsBooklendable sync.RWMutex
	lockServiceMockIsUserExisted  sync.RWMutex
)

// Ensure, that ServiceMock does implement Service.
// If this is not the case, regenerate this file with moq.
var _ Service = &ServiceMock{}

// ServiceMock is a mock implementation of Service.
//
//     func TestSomethingThatUsesService(t *testing.T) {
//
//         // make and configure a mocked Service
//         mockedService := &ServiceMock{
//             CreateFunc: func(ctx context.Context, p *domain.Booklend) error {
// 	               panic("mock out the Create method")
//             },
//             CreateBatchFunc: func(ctx context.Context, p []domain.Booklend) error {
// 	               panic("mock out the CreateBatch method")
//             },
//             IsBookExistedFunc: func(ctx context.Context, p *domain.Book) (bool, error) {
// 	               panic("mock out the IsBookExisted method")
//             },
//             IsBooklendableFunc: func(ctx context.Context, p *domain.Booklend) (bool, error) {
// 	               panic("mock out the IsBooklendable method")
//             },
//             IsUserExistedFunc: func(ctx context.Context, p *domain.User) (bool, error) {
// 	               panic("mock out the IsUserExisted method")
//             },
//         }
//
//         // use mockedService in code that requires Service
//         // and then make assertions.
//
//     }
type ServiceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, p *domain.Booklend) error

	// CreateBatchFunc mocks the CreateBatch method.
	CreateBatchFunc func(ctx context.Context, p []domain.Booklend) error

	// IsBookExistedFunc mocks the IsBookExisted method.
	IsBookExistedFunc func(ctx context.Context, p *domain.Book) (bool, error)

	// IsBooklendableFunc mocks the IsBooklendable method.
	IsBooklendableFunc func(ctx context.Context, p *domain.Booklend) (bool, error)

	// IsUserExistedFunc mocks the IsUserExisted method.
	IsUserExistedFunc func(ctx context.Context, p *domain.User) (bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// P is the p argument value.
			P *domain.Booklend
		}
		// CreateBatch holds details about calls to the CreateBatch method.
		CreateBatch []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// P is the p argument value.
			P []domain.Booklend
		}
		// IsBookExisted holds details about calls to the IsBookExisted method.
		IsBookExisted []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// P is the p argument value.
			P *domain.Book
		}
		// IsBooklendable holds details about calls to the IsBooklendable method.
		IsBooklendable []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// P is the p argument value.
			P *domain.Booklend
		}
		// IsUserExisted holds details about calls to the IsUserExisted method.
		IsUserExisted []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// P is the p argument value.
			P *domain.User
		}
	}
}

// Create calls CreateFunc.
func (mock *ServiceMock) Create(ctx context.Context, p *domain.Booklend) error {
	if mock.CreateFunc == nil {
		panic("ServiceMock.CreateFunc: method is nil but Service.Create was just called")
	}
	callInfo := struct {
		Ctx context.Context
		P   *domain.Booklend
	}{
		Ctx: ctx,
		P:   p,
	}
	lockServiceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockServiceMockCreate.Unlock()
	return mock.CreateFunc(ctx, p)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedService.CreateCalls())
func (mock *ServiceMock) CreateCalls() []struct {
	Ctx context.Context
	P   *domain.Booklend
} {
	var calls []struct {
		Ctx context.Context
		P   *domain.Booklend
	}
	lockServiceMockCreate.RLock()
	calls = mock.calls.Create
	lockServiceMockCreate.RUnlock()
	return calls
}

// CreateBatch calls CreateBatchFunc.
func (mock *ServiceMock) CreateBatch(ctx context.Context, p []domain.Booklend) error {
	if mock.CreateBatchFunc == nil {
		panic("ServiceMock.CreateBatchFunc: method is nil but Service.CreateBatch was just called")
	}
	callInfo := struct {
		Ctx context.Context
		P   []domain.Booklend
	}{
		Ctx: ctx,
		P:   p,
	}
	lockServiceMockCreateBatch.Lock()
	mock.calls.CreateBatch = append(mock.calls.CreateBatch, callInfo)
	lockServiceMockCreateBatch.Unlock()
	return mock.CreateBatchFunc(ctx, p)
}

// CreateBatchCalls gets all the calls that were made to CreateBatch.
// Check the length with:
//     len(mockedService.CreateBatchCalls())
func (mock *ServiceMock) CreateBatchCalls() []struct {
	Ctx context.Context
	P   []domain.Booklend
} {
	var calls []struct {
		Ctx context.Context
		P   []domain.Booklend
	}
	lockServiceMockCreateBatch.RLock()
	calls = mock.calls.CreateBatch
	lockServiceMockCreateBatch.RUnlock()
	return calls
}

// IsBookExisted calls IsBookExistedFunc.
func (mock *ServiceMock) IsBookExisted(ctx context.Context, p *domain.Book) (bool, error) {
	if mock.IsBookExistedFunc == nil {
		panic("ServiceMock.IsBookExistedFunc: method is nil but Service.IsBookExisted was just called")
	}
	callInfo := struct {
		Ctx context.Context
		P   *domain.Book
	}{
		Ctx: ctx,
		P:   p,
	}
	lockServiceMockIsBookExisted.Lock()
	mock.calls.IsBookExisted = append(mock.calls.IsBookExisted, callInfo)
	lockServiceMockIsBookExisted.Unlock()
	return mock.IsBookExistedFunc(ctx, p)
}

// IsBookExistedCalls gets all the calls that were made to IsBookExisted.
// Check the length with:
//     len(mockedService.IsBookExistedCalls())
func (mock *ServiceMock) IsBookExistedCalls() []struct {
	Ctx context.Context
	P   *domain.Book
} {
	var calls []struct {
		Ctx context.Context
		P   *domain.Book
	}
	lockServiceMockIsBookExisted.RLock()
	calls = mock.calls.IsBookExisted
	lockServiceMockIsBookExisted.RUnlock()
	return calls
}

// IsBooklendable calls IsBooklendableFunc.
func (mock *ServiceMock) IsBooklendable(ctx context.Context, p *domain.Booklend) (bool, error) {
	if mock.IsBooklendableFunc == nil {
		panic("ServiceMock.IsBooklendableFunc: method is nil but Service.IsBooklendable was just called")
	}
	callInfo := struct {
		Ctx context.Context
		P   *domain.Booklend
	}{
		Ctx: ctx,
		P:   p,
	}
	lockServiceMockIsBooklendable.Lock()
	mock.calls.IsBooklendable = append(mock.calls.IsBooklendable, callInfo)
	lockServiceMockIsBooklendable.Unlock()
	return mock.IsBooklendableFunc(ctx, p)
}

// IsBooklendableCalls gets all the calls that were made to IsBooklendable.
// Check the length with:
//     len(mockedService.IsBooklendableCalls())
func (mock *ServiceMock) IsBooklendableCalls() []struct {
	Ctx context.Context
	P   *domain.Booklend
} {
	var calls []struct {
		Ctx context.Context
		P   *domain.Booklend
	}
	lockServiceMockIsBooklendable.RLock()
	calls = mock.calls.IsBooklendable
	lockServiceMockIsBooklendable.RUnlock()
	return calls
}

// IsUserExisted calls IsUserExistedFunc.
func (mock *ServiceMock) IsUserExisted(ctx context.Context, p *domain.User) (bool, error) {
	if mock.IsUserExistedFunc == nil {
		panic("ServiceMock.IsUserExistedFunc: method is nil but Service.IsUserExisted was just called")
	}
	callInfo := struct {
		Ctx context.Context
		P   *domain.User
	}{
		Ctx: ctx,
		P:   p,
	}
	lockServiceMockIsUserExisted.Lock()
	mock.calls.IsUserExisted = append(mock.calls.IsUserExisted, callInfo)
	lockServiceMockIsUserExisted.Unlock()
	return mock.IsUserExistedFunc(ctx, p)
}

// IsUserExistedCalls gets all the calls that were made to IsUserExisted.
// Check the length with:
//     len(mockedService.IsUserExistedCalls())
func (mock *ServiceMock) IsUserExistedCalls() []struct {
	Ctx context.Context
	P   *domain.User
} {
	var calls []struct {
		Ctx context.Context
		P   *domain.User
	}
	lockServiceMockIsUserExisted.RLock()
	calls = mock.calls.IsUserExisted
	lockServiceMockIsUserExisted.RUnlock()
	return calls
}
